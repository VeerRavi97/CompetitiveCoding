#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
#define all(c) c.begin(),c.end()
bool isprime(ll n)
{
    if(n==1) return false;

    if(n==2) return true;
    if(n%2==0) return false;
    ll m=sqrt(n);
    for(ll i=3;i<=m;i+=2)
    {
        if(n%i==0) return false;
    }
    return true;

}
set<ll> divisors(ll n)
{
   set<ll> f;
   f.insert(1);
   f.insert(n);
   ll m=sqrt(n);
   for(ll i=2;i<=m;i++ )
   {
      if(n%i==0)
      {

        f.insert(i);
        f.insert(n/i);
      }
   }

   return f;

}
vector<ll> primedivisors(ll n)
{
   vector<ll> f;
   ll m=sqrt(n);
   for(ll i=2;i<=m;i++)
   {
       while(n%i==0)
       {
           f.push_back(i);
           n/=i;
       }


   }
   if(n>1) f.push_back(n);
   return f;

}

vector<ll> GeneartingPrimes(ll n)
{
    vector<ll>seive(n+1,0);
    for(ll i=2;i<=n;i++)
    {
        if(seive[i]==0)
        {
            for(ll j=2*i;j<=n;j+=i)
                seive[j]=i;
        }

    }


return seive;

}

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);




    ll n;

    cin >> n ;
    cout << "isprime" << " "<<isprime(n) << "\n";


set<ll>div=divisors(n);


set<ll>::iterator it ;
// {
//
//
//advance(it, k-1);
// x = *it;
// }

for(it=div.begin();it!=div.end();it++)
    cout << *it << " ";
    vector<ll> f=primedivisors(n);
    cout <<" \n";
    for(ll i=0;i<f.size();i++)
        cout << f[i]<<" ";
cout << "\n";
vector<ll> seive=GeneartingPrimes(n);

    for(ll i=0;i<seive.size();i++)
        cout << seive[i]<<" ";
cout << "\n";
 cout << " no of co-primes to n between 1 and n " << "\n";
 set<ll> v2(all(f));
 double noc=n;
 set<ll>::iterator itr;
 for(itr=v2.begin();itr!=v2.end();itr++)
 {

     double x=*itr;
     noc*=1-1/x;


 }
cout << noc << "\n";



    }


